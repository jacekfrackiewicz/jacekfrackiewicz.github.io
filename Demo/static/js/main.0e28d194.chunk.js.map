{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["columns","title","field","getData","count","result","index","push","id","ObiektyNazwa","faker","random","word","Raport_ADM_SystemyProd_Systemu","Raport_ADM_SystemyTyp_Systemu","Raport_ADM_SystemyTyp_PR","parentId","length","React","Component","App","p","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","currentRow","expanded","priviousStatesData","openedRows","setState","row","i","_this3","react_default","a","createElement","style","paddingLeft","concat","backgroundColor","paddingBottom","material_table_default","key","onRowClick","slice","JSON","parse","stringify","options","toolbar","paging","header","_this4","className","components","Toolbar","index_es","checked","onChange","handleChange","aria-label","in","collapsedHeight","elevation","tableRow","map","x","actions","icon","tooltip","onClick","event","rowData","Math","floor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e28d194.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MaterialTable, { MTableHeader, MTableToolbar } from 'material-table';\nimport faker from 'faker';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Toolbar, Switch, Button, ExpansionPanel, ExpansionPanelDetails, ExpansionPanelSummary, Collapse, Paper } from '@material-ui/core';\n\n\nconst columns = [\n    { title: 'Obiekt', field: 'ObiektyNazwa' },\n    { title: 'Producent systemu zasilania ', field: 'Raport_ADM_SystemyProd_Systemu' },\n    { title: 'Typ systemu zasilania', field: 'Raport_ADM_SystemyTyp_Systemu' },\n    { title: 'Typ prostownika', field: 'Raport_ADM_SystemyTyp_PR' }\n]\n\nfunction getData(count: number): any[] {\n    let result = [];\n\n\n    for (let index = 0; index < count; index++) {\n        result.push({\n            id: index,\n            ObiektyNazwa: faker.random.word(),\n            Raport_ADM_SystemyProd_Systemu: faker.random.word(),\n            Raport_ADM_SystemyTyp_Systemu: faker.random.word(),\n            Raport_ADM_SystemyTyp_PR: faker.random.word(),\n            parentId: result.length % 2 == 0 ? index - 1 : null\n        })\n\n    }\n\n    return result;\n}\ntype State = {\n    data: any[];\n    currentRow: any;\n    expanded: boolean;\n    priviousStatesData: any[][];\n    openedRows: any[];\n}\n\nclass Period extends React.Component<{}, { periods: number }> {\n    state = { periods: 1 };\n\n    addPeriodHandler = () => {\n        this.setState(previousState => {\n            return { periods: previousState.periods + 1 };\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <div id=\"container\">\n                    {Array.from({ length: this.state.periods }, (_, index) => (\n                        <div key={index} >{index}</div>\n                    ))}\n                </div>\n                <div>\n                    <button id=\"addPeriod\" onClick={this.addPeriodHandler}>\n                        Add a period\n            </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass App extends Component<{}, State> {\n    constructor(p: any) {\n        super(p);\n        this.state = {\n            data: [],\n            currentRow: null,\n            expanded: false,\n            priviousStatesData: [],\n            openedRows: []\n        };\n    }\n    componentDidMount() {\n        this.setState({ data: getData(10) })\n    }\n\n\n    handleChange() {\n        \n        this.setState({\n            expanded: !this.state.expanded\n        });\n    }\n    tableRow(row: any, i: number) {\n        return (\n            <div style={{ paddingLeft: `${40 * i}px`, backgroundColor:'lightblue', paddingBottom:'5px' }}>\n                <MaterialTable\n                    key={row.id}\n                    title=\"\"\n                    data={[row]}\n                    columns={columns}\n                    onRowClick={() => {\n\n                        this.setState({\n                            priviousStatesData: i == 0 ? [] : this.state.priviousStatesData.slice(0, i),\n\n                            data: JSON.parse(JSON.stringify(this.state.priviousStatesData[i])),\n                            openedRows: i == 0 ? [] : this.state.openedRows.slice(0, i)\n                        })\n                    }}\n                    options={{\n                        toolbar: false,\n                        paging: false,\n                        header: false\n                    }}\n                />\n            </div>)\n    }\n\n\n\n    render() {\n\n\n        return (\n            <div className=\"App\">\n                <MaterialTable\n                    components={{\n                        Toolbar: p => {\n                            let { currentRow } = this.state;\n                            return (\n\n                                <div style={{backgroundColor:'gray'}}>\n                                    {`Demo Report ${this.state.openedRows.length}`}\n                                    <Switch checked={this.state.expanded} onChange={()=>{this.handleChange()}} aria-label=\"Collapse\" >Show/Hide</Switch>\n                                    <Collapse in={this.state.expanded} collapsedHeight=\"50px\">\n                                    \n                                    {/* <ExpansionPanel expanded={this.state.expanded} onChange={() => this.handleChange()}>\n                                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}> */}\n\n                                    <Paper elevation={4}>\n\n\n\n                                        {this.state.openedRows.length > 0 &&\n                                            this.tableRow(this.state.openedRows[0], 0)\n                                        }\n\n\n                                        {this.state.openedRows.length > 1 &&\n\n                                            this.state.openedRows.map((x, i) => {\n                                                if (i == 0) return\n                                                return this.tableRow(x, i);\n\n                                            })\n\n                                        }\n\n\n\n\n                                    </Paper>\n                                </Collapse>\n                                </div>)\n                        }\n                    }}\n                    data={this.state.data}\n                    columns={columns}\n                    //   data={query =>\n                    //     new Promise((resolve, reject) => {\n                    //           resolve({\n                    //             data: getData(10),\n                    //             page: query.page,\n                    //             totalCount: 100,\n                    //           })\n\n                    //     })\n                    // }\n\n                    actions={[\n                        {\n                            icon: 'info',\n                            tooltip: 'Details',\n                            onClick: (event, rowData) => {\n\n                                this.setState((p) => {\n                                    this.state.priviousStatesData.push(p.data);\n\n                                    return {\n                                        data: getData(Math.floor(Math.random() * 10) + 1),\n                                        currentRow: rowData,\n                                        priviousStatesData: p.priviousStatesData,\n                                        expanded: p.openedRows.length > 0,\n                                        openedRows: p.openedRows.concat(rowData)\n                                    };\n                                })\n                            },\n                        }]}\n                    title=\"Demo raport\"\n\n                    options={{\n\n                    }}\n                />\n            </div>\n\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}