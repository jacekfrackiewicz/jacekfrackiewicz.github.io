{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Type","Orientation","width","window","innerWidth","height","innerHeight","greatings","link","name","type","Picture","orientation","H","App","className","showHint","showSwipeHint","style","margin","paddingTop","boxShadow","animationDuration","firstComponent","src","backgroundColor","position","backgroundImage","GridList","cellHeight","cols","GridListTile","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOASKA,EAIAC,E,yHAPCC,EAAQC,OAAOC,WAAa,KAAO,KAAOD,OAAOC,WACjDC,EAASF,OAAOG,YAAc,IAAM,IAAMH,OAAOG,a,SAElDN,O,iBAAAA,I,sBAAAA,M,cAIAC,O,SAAAA,I,UAAAA,M,KAIL,IAAMM,EAAY,CAEd,CAAEC,KAAM,qBAAsBC,KAAM,cAAeC,KAAMV,EAAKW,QAASC,YAAaX,EAAYY,IAoGrFC,E,iLA5FP,OACI,yBAAKC,UAAU,OACX,6BACI,kBAAC,IAAD,CAAUb,MAAOA,EAAOG,OAAQA,EAC5BW,UAAQ,EACRC,eAAa,EACbC,MAAO,CAAEC,OAAQ,OAAQC,WAAW,GAAD,OA5BxC,EA4BwC,MAAqBlB,MAAO,MAAOmB,UAAW,sEACjFT,YAAY,aACZU,kBAAmB,IAEnBC,eAAgB,iCACZ,yBAAKC,IAAI,cAActB,MAAM,OAAOG,OAAO,WAI/C,6BAASa,MAAO,CAAEO,gBAAiB,uBAC/B,yBAAKV,UAAU,YAAYG,MAAO,CAAEO,gBAAiB,uBACjD,yBAAKV,UAAU,UAAUG,MAAO,CAAEO,gBAAiB,uBAC/C,6BAAK,oCACL,6BAAK,oCACL,6BAAK,oCACL,6BAAK,oCACL,6BAAK,2CAIb,yBAAKD,IAAI,cAActB,MAAM,OAAOG,OAAO,UAE/C,iCACI,yBAAKmB,IAAI,cAActB,MAAK,UAAKA,EAAQ,GAAKG,OAAM,UAAKA,KACzD,yBAAKmB,IAAI,cAAcN,MAAO,CAAEQ,SAAU,YAAcxB,MAAK,UAAKA,EAAQ,GAAKG,OAAM,UAAKA,EAAS,KACnG,yBAAKmB,IAAI,cAActB,MAAK,UAAKA,EAAQ,GAAKG,OAAM,UAAKA,EAAS,MAItE,yBAAKa,MAAO,CACRb,OAAQ,OAERsB,gBAAiB,8IAGjB,kBAACC,EAAA,EAAD,CAAUV,MAAO,CAAEE,WAAY,OAAUS,WAAY,IAAKC,KAAM,GAI5D,kBAACC,EAAA,EAAD,CAAcD,KAAM,GAEpB,yBAAKZ,MAAO,CAAEC,OAAQ,OAAOd,OAAO,UAChC,wBAAIa,MAAO,CAAEQ,SAAU,YAAvB,sBAII,kBAACK,EAAA,EAAD,CAAcD,KAAM,GAChB,6BACI,6BAAMvB,EAAU,GAAGE,MACnB,yBAAKe,IAAKjB,EAAU,GAAGC,KAAON,MAAK,MAASG,OAAM,UAI1D,kBAAC0B,EAAA,EAAD,CAAcD,KAAM,GACpB,4BAAQ5B,MAAM,MAAMG,OAAO,MAC3BmB,IAAI,+CApBhB,QA6BA,mCAQJ,iCAEI,yBAAKA,IAAI,cAActB,MAAM,OAAOG,OAAO,iB,GAlFrD2B,IAAMC,WCbJC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d04bbedd.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport FlipPage from 'react-flip-page';\nimport { GridList, GridListTile } from '@material-ui/core';\n\nconst paddingTop = 0;\nconst width = window.innerWidth > 1200 ? 1200 : window.innerWidth;\nconst height = window.innerHeight > 800 ? 800 : window.innerHeight;\n\nenum Type {\n    Movie,\n    Picture\n}\nenum Orientation {\n    H,\n    V\n}\nconst greatings = [\n\n    { link: \"files/IzaJacek.jpg\", name: \"Jacek i Iza\", type: Type.Picture, orientation: Orientation.H },\n\n]\n\n\n\nclass App extends React.Component<any, any> {\n    render() {\n        return (\n            <div className=\"App\" >\n                <div >\n                    <FlipPage width={width} height={height}\n                        showHint\n                        showSwipeHint\n                        style={{ margin: 'auto', paddingTop: `${paddingTop}px`, width: '50%', boxShadow: '0 10px 10px 0 rgba(0, 0, 0, 0.5), 0 16px 30px 0 rgba(0, 0, 0, 0.5)' }}\n                        orientation='horizontal'\n                        animationDuration={500}\n\n                        firstComponent={<article>\n                            <img src=\"files/6.jpg\" width='100%' height='100%' />\n                        </article>}\n                    >\n\n                        <article style={{ backgroundColor: 'rgb(200, 238, 249)' }}>\n                            <div className=\"container\" style={{ backgroundColor: 'rgb(200, 238, 249)' }}>\n                                <div className=\"balloon\" style={{ backgroundColor: 'rgb(200, 238, 249)' }}>\n                                    <div><span>S</span></div>\n                                    <div><span>E</span></div>\n                                    <div><span>B</span></div>\n                                    <div><span>U</span></div>\n                                    <div><span>Ś</span></div>\n                                </div>\n\n                            </div>\n                            <img src=\"files/2.jpg\" width='100%' height='100%' />\n                        </article>\n                        <article>\n                            <img src=\"files/3.jpg\" width={`${width / 2}`} height={`${height}`} />\n                            <img src=\"files/4.jpg\" style={{ position: 'absolute' }} width={`${width / 2}`} height={`${height / 2}`} />\n                            <img src=\"files/5.gif\" width={`${width / 2}`} height={`${height / 2}`} />\n\n                        </article>\n                        \n                        <div style={{\n                            height: '100%',\n\n                            backgroundImage: 'linear-gradient(to right top, #d16ba5, #c777b9, #ba83ca, #aa8fd8, #9a9ae1, #8aa7ec, #79b3f4, #69bff8, #52cffe, #41dfff, #46eefa, #5ffbf1)'\n                        }}>\n\n                            <GridList style={{ paddingTop: '1px' }}  cellHeight={400} cols={2} >\n\n\n                                \n                                <GridListTile cols={1}>\n\n                                <div style={{ margin: 'auto',height:'100px' }}>\n                                    <h1 style={{ position: 'initial' }}>Życzą:</h1>\n                                </div>\n                                </GridListTile>\n\n                                        <GridListTile cols={1}>\n                                            <div>\n                                                <div>{greatings[0].name}</div>\n                                                <img src={greatings[0].link}  width={`600`} height={`400`} />\n                                            </div>\n                                            \n                                        </GridListTile>\n                                        <GridListTile cols={1}>\n                                        <iframe width=\"420\" height=\"315\"\n                                        src=\"https://www.youtube.com/embed/wPw5WiABUOA\">\n                                        </iframe>\n                                        </GridListTile>\n                                        \n                                    })\n                                }\n\n\n                            </GridList>\n                            <article>\n                           \n                                \n                          \n                            \n\n                        </article>\n                        </div>\n                        <article>\n                        \n                            <img src=\"files/6.jpg\" width='100%' height='100%' />\n                        </article>\n                    </FlipPage>\n                </div>\n\n\n\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}